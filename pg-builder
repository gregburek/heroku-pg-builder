#!/bin/bash

set -u

USAGE=$(cat<<EOF
Usage:

  $0 available ([-n LIMIT] | [-v VERSION])
  $0 build [-v VERSION]

  # N.B.: Postgres releases generally follow the pattern alpha
  # (9.2alpha1), beta (9.2beta2), release candidate (9.2rc1), and
  # general availability (9.2.0, 9.2.1).

EOF
)

subcommand=${1:?"$USAGE"}

if [[ ! "$subcommand" =~ available|build ]]
then
  echo "$USAGE"
  exit 1
fi

shift

limit=
version=

while getopts "n:v:" opt
do
  case "$opt" in
    n) limit="$OPTARG";;
    v) version="$OPTARG";;
  esac
done
shift $((OPTIND-1))

if [[ $# -gt 0 ]]
then
  echo "$USAGE"
  exit 1
fi

ftp_site="http://ftp.postgresql.org/pub/source/"
releases="$(curl "$ftp_site" 2>/dev/null | \
  sed -E -n 's/.*href="v([0-9.]+(alpha|beta|rc)?[0-9]+)\/".*/\1/p')"

# the releases are not quite sorted; and my shell-fu is not 1337 enough to sort them
releases="$(ruby -e "puts %w[$releases].select { |release|
  # for simplicity, just filter out other releases
  /^(\d+)\.(\d+)(\.|alpha|beta|rc)(\d+)$/.match(release)
}.sort { |l,r|
  lmatch = /(\d+)\.(\d+)(\.|alpha|beta|rc)(\d+)/.match(l)
  rmatch = /(\d+)\.(\d+)(\.|alpha|beta|rc)(\d+)/.match(r)

  if lmatch && rmatch
    if lmatch[1] != rmatch[1]
      lmatch[1].to_i <=> rmatch[1].to_i
    elsif lmatch[2] != rmatch[2]
      lmatch[2].to_i <=> rmatch[2].to_i
    elsif lmatch[3] != rmatch[3]
      type_val = { 'alpha' => 0, 'beta' => 1, 'rc' => 2, '.' => 3 }
      type_val[lmatch[3]] <=> type_val[rmatch[3]]
    else
      lmatch[4].to_i <=> rmatch[4].to_i
    end
  elsif lmatch
    return 1
  else
    return -1
  end
}")"

if [ "$subcommand" == 'available' ]
then
  if [ -n "$version" ]
  then
    echo "$releases" | egrep "^${version}"
  else
    echo "$releases" | tail -n ${limit:-10}
  fi
elif [ "$subcommand" == 'build' ]
then
  which heroku >/dev/null 2>&1 || die "Heroku CLI required; see https://toolbelt.heroku.com/"
  heroku plugins | grep 'heroku-anvil' >/dev/null 2>&1 || die "Heroku anvil required; see https://github.com/ddollar/heroku-anvil"

  if [ -n "$version" ]
  then
    avail_ver="$(echo "$releases" | grep "^$version$")"
    build_ver="${avail_ver:?"Requested version $version not found"}"
  else
    # get the latest GA version by default; this should work
    build_ver="$(echo "$releases" | grep -v 'alpha|beta|rc' | tail -1)"
  fi

  echo "Building Postgres $build_ver"
  build_script="https://raw.github.com/gregburek/heroku-pg-builder/master/build-pgsql.sh"
  psql_url="http://ftp.postgresql.org/pub/source/v${build_ver}/postgresql-${build_ver}.tar.bz2"
  slug=$(heroku build -p "$psql_url" -b "$build_script")

  echo "Finished building Postgres $build_ver"
  echo "Fetching and mangling"

  rm -rf workspace/*
  mkdir -p workspace/pg
  pushd workspace/pg >/dev/null
  curl -s $slug | tar zx ./bin ./lib

  # Clean up binaries (and their dependencies) that are generally not useful
  # to a client. Some are marginal but users can always pare this down further.
  rm bin/{ecpg,initdb,pg_ctl,pg_controldata,pg_resetxlog,postgres,postmaster}
  pushd lib >/dev/null
  ls | grep -v libpq.so | xargs rm -rf
  popd >/dev/null
  echo $build_ver > VERSION
  popd >/dev/null

  cat <<EOF

    Build complete. You can copy 'workspace/pg' into the vendor
    directory your Heroku Cedar application, run 'heroku config:add
    LD_LIBRARY_PATH=/app/vendor/pg/lib' and use any postgres client
    binary with its full path in '/app/vendor/pg/bin'.

EOF

fi
